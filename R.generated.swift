//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Segoe UI.ttf`.
    static let segoeUITtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Segoe UI", pathExtension: "ttf")
    /// Resource file `segoe-ui-bold.ttf`.
    static let segoeUiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "segoe-ui-bold", pathExtension: "ttf")
    /// Resource file `seguisb.ttf`.
    static let seguisbTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "seguisb", pathExtension: "ttf")
    /// Resource file `style.json`.
    static let styleJson = Rswift.FileResource(bundle: R.hostingBundle, name: "style", pathExtension: "json")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Segoe UI", withExtension: "ttf")`
    static func segoeUITtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.segoeUITtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "segoe-ui-bold", withExtension: "ttf")`
    static func segoeUiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.segoeUiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "seguisb", withExtension: "ttf")`
    static func seguisbTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.seguisbTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "style", withExtension: "json")`
    static func styleJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.styleJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 3 fonts.
  struct font: Rswift.Validatable {
    /// Font `SegoeUI-Bold`.
    static let segoeUIBold = Rswift.FontResource(fontName: "SegoeUI-Bold")
    /// Font `SegoeUI-Semibold`.
    static let segoeUISemibold = Rswift.FontResource(fontName: "SegoeUI-Semibold")
    /// Font `SegoeUI`.
    static let segoeUI = Rswift.FontResource(fontName: "SegoeUI")
    
    /// `UIFont(name: "SegoeUI", size: ...)`
    static func segoeUI(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: segoeUI, size: size)
    }
    
    /// `UIFont(name: "SegoeUI-Bold", size: ...)`
    static func segoeUIBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: segoeUIBold, size: size)
    }
    
    /// `UIFont(name: "SegoeUI-Semibold", size: ...)`
    static func segoeUISemibold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: segoeUISemibold, size: size)
    }
    
    static func validate() throws {
      if R.font.segoeUI(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SegoeUI' could not be loaded, is 'Segoe UI.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.segoeUIBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SegoeUI-Bold' could not be loaded, is 'segoe-ui-bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.segoeUISemibold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SegoeUI-Semibold' could not be loaded, is 'seguisb.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 116 images.
  struct image {
    /// Image `0002088_store-allowancepersonal-expense-funding-1`.
    static let _storeAllowancepersonalExpenseFunding1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "0002088_store-allowancepersonal-expense-funding-1")
    /// Image `0002088_store-allowancepersonal-expense-funding-2`.
    static let _storeAllowancepersonalExpenseFunding2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "0002088_store-allowancepersonal-expense-funding-2")
    /// Image `0002088_store-allowancepersonal-expense-funding`.
    static let _storeAllowancepersonalExpenseFunding = Rswift.ImageResource(bundle: R.hostingBundle, name: "0002088_store-allowancepersonal-expense-funding")
    /// Image `646900_phone_512x512-1`.
    static let _phone_512x5121 = Rswift.ImageResource(bundle: R.hostingBundle, name: "646900_phone_512x512-1")
    /// Image `646900_phone_512x512`.
    static let _phone_512x512 = Rswift.ImageResource(bundle: R.hostingBundle, name: "646900_phone_512x512")
    /// Image `Back to home-1`.
    static let backToHome1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back to home-1")
    /// Image `Back to home-2`.
    static let backToHome2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back to home-2")
    /// Image `Back to home`.
    static let backToHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back to home")
    /// Image `Back_button`.
    static let back_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back_button")
    /// Image `Chauffeur_hp (1)`.
    static let chauffeur_hp1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Chauffeur_hp (1)")
    /// Image `Ellipse 1`.
    static let ellipse1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 1")
    /// Image `Ellipse 2`.
    static let ellipse2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Ellipse 2")
    /// Image `Exclamation-Point`.
    static let exclamationPoint = Rswift.ImageResource(bundle: R.hostingBundle, name: "Exclamation-Point")
    /// Image `GET PAID`.
    static let getpaiD = Rswift.ImageResource(bundle: R.hostingBundle, name: "GET PAID")
    /// Image `Greego_App_Icon1`.
    static let greego_App_Icon1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Greego_App_Icon1")
    /// Image `Greego_App_Icon`.
    static let greego_App_Icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Greego_App_Icon")
    /// Image `Group 1`.
    static let group1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 1")
    /// Image `LYFTUBERBLOG`.
    static let lyftuberbloG = Rswift.ImageResource(bundle: R.hostingBundle, name: "LYFTUBERBLOG")
    /// Image `LaunchImage-1`.
    static let launchImage1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage-1")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `Line 1`.
    static let line1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line 1")
    /// Image `Line 20`.
    static let line20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Line 20")
    /// Image `Logo_X`.
    static let logo_X = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo_X")
    /// Image `Logout-512`.
    static let logout512 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logout-512")
    /// Image `Marine_nautical-09-512`.
    static let marine_nautical09512 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Marine_nautical-09-512")
    /// Image `Next_button-1`.
    static let next_button1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Next_button-1")
    /// Image `Next_button`.
    static let next_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "Next_button")
    /// Image `NoVictor_(Visa)`.
    static let noVictor_Visa = Rswift.ImageResource(bundle: R.hostingBundle, name: "NoVictor_(Visa)")
    /// Image `OFF`.
    static let ofF = Rswift.ImageResource(bundle: R.hostingBundle, name: "OFF")
    /// Image `ON`.
    static let oN = Rswift.ImageResource(bundle: R.hostingBundle, name: "ON")
    /// Image `PIG`.
    static let piG = Rswift.ImageResource(bundle: R.hostingBundle, name: "PIG")
    /// Image `Path 11`.
    static let path11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Path 11")
    /// Image `Rectangle 10`.
    static let rectangle10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 10")
    /// Image `Rectangle 119`.
    static let rectangle119 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 119")
    /// Image `Rectangle 120`.
    static let rectangle120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 120")
    /// Image `Rectangle 1`.
    static let rectangle1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 1")
    /// Image `Rectangle 23`.
    static let rectangle23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 23")
    /// Image `Rectangle 26`.
    static let rectangle26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 26")
    /// Image `Rectangle 27`.
    static let rectangle27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 27")
    /// Image `Rectangle 2`.
    static let rectangle2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 2")
    /// Image `Rectangle 4`.
    static let rectangle4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 4")
    /// Image `Rectangle 66`.
    static let rectangle66 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 66")
    /// Image `Rectangle 69`.
    static let rectangle69 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 69")
    /// Image `Rectangle 70`.
    static let rectangle70 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 70")
    /// Image `Rectangle 75`.
    static let rectangle75 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 75")
    /// Image `Rectangle 84`.
    static let rectangle84 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Rectangle 84")
    /// Image `Star-PNG-Image`.
    static let starPNGImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star-PNG-Image")
    /// Image `Start-pin`.
    static let startPin = Rswift.ImageResource(bundle: R.hostingBundle, name: "Start-pin")
    /// Image `Todd_circle_profile`.
    static let todd_circle_profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Todd_circle_profile")
    /// Image `__iPhone_Phone_Apple_Gadget_circle_-512`.
    static let __iPhone_Phone_Apple_Gadget_circle_512 = Rswift.ImageResource(bundle: R.hostingBundle, name: "__iPhone_Phone_Apple_Gadget_circle_-512")
    /// Image `attachment`.
    static let attachment = Rswift.ImageResource(bundle: R.hostingBundle, name: "attachment")
    /// Image `backimg`.
    static let backimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "backimg")
    /// Image `bank-2`.
    static let bank2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bank-2")
    /// Image `bg_rectangle`.
    static let bg_rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_rectangle")
    /// Image `btnbackimg`.
    static let btnbackimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "btnbackimg")
    /// Image `credit-card-icon-free-download-png-and-vector-throughout-credit-card-icon`.
    static let creditCardIconFreeDownloadPngAndVectorThroughoutCreditCardIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "credit-card-icon-free-download-png-and-vector-throughout-credit-card-icon")
    /// Image `cross`.
    static let cross = Rswift.ImageResource(bundle: R.hostingBundle, name: "cross")
    /// Image `dashboard-1`.
    static let dashboard1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboard-1")
    /// Image `dashboard`.
    static let dashboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "dashboard")
    /// Image `default-user`.
    static let defaultUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "default-user")
    /// Image `defaultPhoto`.
    static let defaultPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "defaultPhoto")
    /// Image `download-1`.
    static let download1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "download-1")
    /// Image `download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "download")
    /// Image `driverimg`.
    static let driverimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "driverimg")
    /// Image `earning`.
    static let earning = Rswift.ImageResource(bundle: R.hostingBundle, name: "earning")
    /// Image `email`.
    static let email = Rswift.ImageResource(bundle: R.hostingBundle, name: "email")
    /// Image `emptyStar`.
    static let emptyStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "emptyStar")
    /// Image `envelope_outline-128`.
    static let envelope_outline128 = Rswift.ImageResource(bundle: R.hostingBundle, name: "envelope_outline-128")
    /// Image `express`.
    static let express = Rswift.ImageResource(bundle: R.hostingBundle, name: "express")
    /// Image `filledStar`.
    static let filledStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "filledStar")
    /// Image `flag for mobile`.
    static let flagForMobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag for mobile")
    /// Image `flag`.
    static let flag = Rswift.ImageResource(bundle: R.hostingBundle, name: "flag")
    /// Image `forbes-profile`.
    static let forbesProfile = Rswift.ImageResource(bundle: R.hostingBundle, name: "forbes-profile")
    /// Image `greego`.
    static let greego = Rswift.ImageResource(bundle: R.hostingBundle, name: "greego")
    /// Image `help-1`.
    static let help1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "help-1")
    /// Image `help`.
    static let help = Rswift.ImageResource(bundle: R.hostingBundle, name: "help")
    /// Image `highlightedStar`.
    static let highlightedStar = Rswift.ImageResource(bundle: R.hostingBundle, name: "highlightedStar")
    /// Image `home`.
    static let home = Rswift.ImageResource(bundle: R.hostingBundle, name: "home")
    /// Image `ic alert`.
    static let icAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic alert")
    /// Image `ic_greego_logo`.
    static let ic_greego_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_greego_logo")
    /// Image `img_281585`.
    static let img_281585 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_281585")
    /// Image `left-arrow`.
    static let leftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "left-arrow")
    /// Image `logout`.
    static let logout = Rswift.ImageResource(bundle: R.hostingBundle, name: "logout")
    /// Image `lyft`.
    static let lyft = Rswift.ImageResource(bundle: R.hostingBundle, name: "lyft")
    /// Image `manage`.
    static let manage = Rswift.ImageResource(bundle: R.hostingBundle, name: "manage")
    /// Image `map_home`.
    static let map_home = Rswift.ImageResource(bundle: R.hostingBundle, name: "map_home")
    /// Image `map`.
    static let map = Rswift.ImageResource(bundle: R.hostingBundle, name: "map")
    /// Image `mobile`.
    static let mobile = Rswift.ImageResource(bundle: R.hostingBundle, name: "mobile")
    /// Image `navigate`.
    static let navigate = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigate")
    /// Image `navigation`.
    static let navigation = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation")
    /// Image `nextimg`.
    static let nextimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextimg")
    /// Image `nextpaybtn`.
    static let nextpaybtn = Rswift.ImageResource(bundle: R.hostingBundle, name: "nextpaybtn")
    /// Image `padlock`.
    static let padlock = Rswift.ImageResource(bundle: R.hostingBundle, name: "padlock")
    /// Image `paper_money`.
    static let paper_money = Rswift.ImageResource(bundle: R.hostingBundle, name: "paper_money")
    /// Image `payment`.
    static let payment = Rswift.ImageResource(bundle: R.hostingBundle, name: "payment")
    /// Image `phone call`.
    static let phoneCall = Rswift.ImageResource(bundle: R.hostingBundle, name: "phone call")
    /// Image `pin`.
    static let pin = Rswift.ImageResource(bundle: R.hostingBundle, name: "pin")
    /// Image `rectangle`.
    static let rectangle = Rswift.ImageResource(bundle: R.hostingBundle, name: "rectangle")
    /// Image `right-arrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "right-arrow")
    /// Image `setting`.
    static let setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "setting")
    /// Image `settings-glyph`.
    static let settingsGlyph = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings-glyph")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `shadowbutton`.
    static let shadowbutton = Rswift.ImageResource(bundle: R.hostingBundle, name: "shadowbutton")
    /// Image `share-1`.
    static let share1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "share-1")
    /// Image `share`.
    static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "share")
    /// Image `sidemenubackimg`.
    static let sidemenubackimg = Rswift.ImageResource(bundle: R.hostingBundle, name: "sidemenubackimg")
    /// Image `sport-car-coupe-auto-top-view-512`.
    static let sportCarCoupeAutoTopView512 = Rswift.ImageResource(bundle: R.hostingBundle, name: "sport-car-coupe-auto-top-view-512")
    /// Image `start`.
    static let start = Rswift.ImageResource(bundle: R.hostingBundle, name: "start")
    /// Image `switchuser`.
    static let switchuser = Rswift.ImageResource(bundle: R.hostingBundle, name: "switchuser")
    /// Image `taxi-background`.
    static let taxiBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "taxi-background")
    /// Image `transfer`.
    static let transfer = Rswift.ImageResource(bundle: R.hostingBundle, name: "transfer")
    /// Image `uber-everywhere`.
    static let uberEverywhere = Rswift.ImageResource(bundle: R.hostingBundle, name: "uber-everywhere")
    /// Image `unnamed (1)`.
    static let unnamed1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "unnamed (1)")
    /// Image `unnamed`.
    static let unnamed = Rswift.ImageResource(bundle: R.hostingBundle, name: "unnamed")
    /// Image `usaflag`.
    static let usaflag = Rswift.ImageResource(bundle: R.hostingBundle, name: "usaflag")
    /// Image `user`.
    static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "user")
    
    /// `UIImage(named: "0002088_store-allowancepersonal-expense-funding", bundle: ..., traitCollection: ...)`
    static func _storeAllowancepersonalExpenseFunding(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._storeAllowancepersonalExpenseFunding, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "0002088_store-allowancepersonal-expense-funding-1", bundle: ..., traitCollection: ...)`
    static func _storeAllowancepersonalExpenseFunding1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._storeAllowancepersonalExpenseFunding1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "0002088_store-allowancepersonal-expense-funding-2", bundle: ..., traitCollection: ...)`
    static func _storeAllowancepersonalExpenseFunding2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._storeAllowancepersonalExpenseFunding2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "646900_phone_512x512", bundle: ..., traitCollection: ...)`
    static func _phone_512x512(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._phone_512x512, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "646900_phone_512x512-1", bundle: ..., traitCollection: ...)`
    static func _phone_512x5121(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image._phone_512x5121, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back to home", bundle: ..., traitCollection: ...)`
    static func backToHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backToHome, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back to home-1", bundle: ..., traitCollection: ...)`
    static func backToHome1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backToHome1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back to home-2", bundle: ..., traitCollection: ...)`
    static func backToHome2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backToHome2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back_button", bundle: ..., traitCollection: ...)`
    static func back_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Chauffeur_hp (1)", bundle: ..., traitCollection: ...)`
    static func chauffeur_hp1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chauffeur_hp1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Ellipse 1", bundle: ..., traitCollection: ...)`
    static func ellipse1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Ellipse 2", bundle: ..., traitCollection: ...)`
    static func ellipse2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ellipse2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Exclamation-Point", bundle: ..., traitCollection: ...)`
    static func exclamationPoint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exclamationPoint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "GET PAID", bundle: ..., traitCollection: ...)`
    static func getpaiD(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.getpaiD, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Greego_App_Icon", bundle: ..., traitCollection: ...)`
    static func greego_App_Icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greego_App_Icon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Greego_App_Icon1", bundle: ..., traitCollection: ...)`
    static func greego_App_Icon1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greego_App_Icon1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Group 1", bundle: ..., traitCollection: ...)`
    static func group1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LYFTUBERBLOG", bundle: ..., traitCollection: ...)`
    static func lyftuberbloG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lyftuberbloG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage-1", bundle: ..., traitCollection: ...)`
    static func launchImage1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Line 1", bundle: ..., traitCollection: ...)`
    static func line1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Line 20", bundle: ..., traitCollection: ...)`
    static func line20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.line20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logo_X", bundle: ..., traitCollection: ...)`
    static func logo_X(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_X, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Logout-512", bundle: ..., traitCollection: ...)`
    static func logout512(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout512, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Marine_nautical-09-512", bundle: ..., traitCollection: ...)`
    static func marine_nautical09512(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.marine_nautical09512, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Next_button", bundle: ..., traitCollection: ...)`
    static func next_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next_button, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Next_button-1", bundle: ..., traitCollection: ...)`
    static func next_button1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.next_button1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NoVictor_(Visa)", bundle: ..., traitCollection: ...)`
    static func noVictor_Visa(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noVictor_Visa, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OFF", bundle: ..., traitCollection: ...)`
    static func ofF(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ofF, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ON", bundle: ..., traitCollection: ...)`
    static func oN(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.oN, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PIG", bundle: ..., traitCollection: ...)`
    static func piG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.piG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Path 11", bundle: ..., traitCollection: ...)`
    static func path11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.path11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 1", bundle: ..., traitCollection: ...)`
    static func rectangle1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 10", bundle: ..., traitCollection: ...)`
    static func rectangle10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 119", bundle: ..., traitCollection: ...)`
    static func rectangle119(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle119, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 120", bundle: ..., traitCollection: ...)`
    static func rectangle120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle120, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 2", bundle: ..., traitCollection: ...)`
    static func rectangle2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 23", bundle: ..., traitCollection: ...)`
    static func rectangle23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle23, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 26", bundle: ..., traitCollection: ...)`
    static func rectangle26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle26, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 27", bundle: ..., traitCollection: ...)`
    static func rectangle27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle27, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 4", bundle: ..., traitCollection: ...)`
    static func rectangle4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 66", bundle: ..., traitCollection: ...)`
    static func rectangle66(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle66, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 69", bundle: ..., traitCollection: ...)`
    static func rectangle69(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle69, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 70", bundle: ..., traitCollection: ...)`
    static func rectangle70(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle70, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 75", bundle: ..., traitCollection: ...)`
    static func rectangle75(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle75, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Rectangle 84", bundle: ..., traitCollection: ...)`
    static func rectangle84(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle84, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star-PNG-Image", bundle: ..., traitCollection: ...)`
    static func starPNGImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.starPNGImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Start-pin", bundle: ..., traitCollection: ...)`
    static func startPin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.startPin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Todd_circle_profile", bundle: ..., traitCollection: ...)`
    static func todd_circle_profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todd_circle_profile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "__iPhone_Phone_Apple_Gadget_circle_-512", bundle: ..., traitCollection: ...)`
    static func __iPhone_Phone_Apple_Gadget_circle_512(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.__iPhone_Phone_Apple_Gadget_circle_512, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "attachment", bundle: ..., traitCollection: ...)`
    static func attachment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.attachment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backimg", bundle: ..., traitCollection: ...)`
    static func backimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bank-2", bundle: ..., traitCollection: ...)`
    static func bank2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bank2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bg_rectangle", bundle: ..., traitCollection: ...)`
    static func bg_rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_rectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btnbackimg", bundle: ..., traitCollection: ...)`
    static func btnbackimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnbackimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "credit-card-icon-free-download-png-and-vector-throughout-credit-card-icon", bundle: ..., traitCollection: ...)`
    static func creditCardIconFreeDownloadPngAndVectorThroughoutCreditCardIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.creditCardIconFreeDownloadPngAndVectorThroughoutCreditCardIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cross, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dashboard", bundle: ..., traitCollection: ...)`
    static func dashboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dashboard-1", bundle: ..., traitCollection: ...)`
    static func dashboard1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dashboard1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "default-user", bundle: ..., traitCollection: ...)`
    static func defaultUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultUser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "defaultPhoto", bundle: ..., traitCollection: ...)`
    static func defaultPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.defaultPhoto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "download-1", bundle: ..., traitCollection: ...)`
    static func download1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "driverimg", bundle: ..., traitCollection: ...)`
    static func driverimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.driverimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "earning", bundle: ..., traitCollection: ...)`
    static func earning(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earning, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "email", bundle: ..., traitCollection: ...)`
    static func email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "emptyStar", bundle: ..., traitCollection: ...)`
    static func emptyStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emptyStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "envelope_outline-128", bundle: ..., traitCollection: ...)`
    static func envelope_outline128(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.envelope_outline128, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "express", bundle: ..., traitCollection: ...)`
    static func express(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.express, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "filledStar", bundle: ..., traitCollection: ...)`
    static func filledStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.filledStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flag for mobile", bundle: ..., traitCollection: ...)`
    static func flagForMobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flagForMobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "flag", bundle: ..., traitCollection: ...)`
    static func flag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.flag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "forbes-profile", bundle: ..., traitCollection: ...)`
    static func forbesProfile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forbesProfile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "greego", bundle: ..., traitCollection: ...)`
    static func greego(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.greego, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "help", bundle: ..., traitCollection: ...)`
    static func help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "help-1", bundle: ..., traitCollection: ...)`
    static func help1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.help1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "highlightedStar", bundle: ..., traitCollection: ...)`
    static func highlightedStar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.highlightedStar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "home", bundle: ..., traitCollection: ...)`
    static func home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic alert", bundle: ..., traitCollection: ...)`
    static func icAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icAlert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_greego_logo", bundle: ..., traitCollection: ...)`
    static func ic_greego_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_greego_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "img_281585", bundle: ..., traitCollection: ...)`
    static func img_281585(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_281585, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "left-arrow", bundle: ..., traitCollection: ...)`
    static func leftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.leftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "logout", bundle: ..., traitCollection: ...)`
    static func logout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lyft", bundle: ..., traitCollection: ...)`
    static func lyft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lyft, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "manage", bundle: ..., traitCollection: ...)`
    static func manage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.manage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map", bundle: ..., traitCollection: ...)`
    static func map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "map_home", bundle: ..., traitCollection: ...)`
    static func map_home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.map_home, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "mobile", bundle: ..., traitCollection: ...)`
    static func mobile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mobile, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigate", bundle: ..., traitCollection: ...)`
    static func navigate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigate, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navigation", bundle: ..., traitCollection: ...)`
    static func navigation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nextimg", bundle: ..., traitCollection: ...)`
    static func nextimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "nextpaybtn", bundle: ..., traitCollection: ...)`
    static func nextpaybtn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.nextpaybtn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "padlock", bundle: ..., traitCollection: ...)`
    static func padlock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.padlock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "paper_money", bundle: ..., traitCollection: ...)`
    static func paper_money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paper_money, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "payment", bundle: ..., traitCollection: ...)`
    static func payment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.payment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "phone call", bundle: ..., traitCollection: ...)`
    static func phoneCall(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.phoneCall, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pin", bundle: ..., traitCollection: ...)`
    static func pin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pin, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rectangle", bundle: ..., traitCollection: ...)`
    static func rectangle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rectangle, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "right-arrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setting", bundle: ..., traitCollection: ...)`
    static func setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings-glyph", bundle: ..., traitCollection: ...)`
    static func settingsGlyph(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsGlyph, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "shadowbutton", bundle: ..., traitCollection: ...)`
    static func shadowbutton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shadowbutton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
    static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "share-1", bundle: ..., traitCollection: ...)`
    static func share1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.share1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sidemenubackimg", bundle: ..., traitCollection: ...)`
    static func sidemenubackimg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sidemenubackimg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sport-car-coupe-auto-top-view-512", bundle: ..., traitCollection: ...)`
    static func sportCarCoupeAutoTopView512(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sportCarCoupeAutoTopView512, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "start", bundle: ..., traitCollection: ...)`
    static func start(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.start, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "switchuser", bundle: ..., traitCollection: ...)`
    static func switchuser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchuser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "taxi-background", bundle: ..., traitCollection: ...)`
    static func taxiBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.taxiBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "transfer", bundle: ..., traitCollection: ...)`
    static func transfer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.transfer, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "uber-everywhere", bundle: ..., traitCollection: ...)`
    static func uberEverywhere(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.uberEverywhere, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unnamed (1)", bundle: ..., traitCollection: ...)`
    static func unnamed1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unnamed1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "unnamed", bundle: ..., traitCollection: ...)`
    static func unnamed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unnamed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "usaflag", bundle: ..., traitCollection: ...)`
    static func usaflag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.usaflag, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "user", bundle: ..., traitCollection: ...)`
    static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.user, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `cell1`.
    static let cell1: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell1")
    /// Reuse identifier `cell2`.
    static let cell2: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell2")
    /// Reuse identifier `cell3`.
    static let cell3: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cell3")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `DrivemapVC`, and contains static references to 1 segues.
    struct drivemapVC {
      /// Segue identifier `PushToTripRequest`.
      static let pushToTripRequest: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DrivemapVC, Greegodriverapp.RequestDriverVC> = Rswift.StoryboardSegueIdentifier(identifier: "PushToTripRequest")
      
      /// Optionally returns a typed version of segue `PushToTripRequest`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushToTripRequest(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DrivemapVC, Greegodriverapp.RequestDriverVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.drivemapVC.pushToTripRequest, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RequestDriverVC`, and contains static references to 1 segues.
    struct greegodriverappRequestDriverVC {
      /// Segue identifier `ToDriverRatingVirew`.
      static let toDriverRatingVirew: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, Greegodriverapp.RequestDriverVC, DriverRatingVC> = Rswift.StoryboardSegueIdentifier(identifier: "ToDriverRatingVirew")
      
      /// Optionally returns a typed version of segue `ToDriverRatingVirew`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toDriverRatingVirew(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, Greegodriverapp.RequestDriverVC, DriverRatingVC>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.greegodriverappRequestDriverVC.toDriverRatingVirew, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SWRevealViewController`, and contains static references to 2 segues.
    struct swRevealViewController {
      /// Segue identifier `sw_front`.
      static let sw_front: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSegueSetController, SWRevealViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "sw_front")
      /// Segue identifier `sw_rear`.
      static let sw_rear: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSegueSetController, SWRevealViewController, sidemenuViewController> = Rswift.StoryboardSegueIdentifier(identifier: "sw_rear")
      
      /// Optionally returns a typed version of segue `sw_front`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sw_front(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSegueSetController, SWRevealViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.swRevealViewController.sw_front, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `sw_rear`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func sw_rear(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSegueSetController, SWRevealViewController, sidemenuViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.swRevealViewController.sw_rear, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ViewController`, and contains static references to 1 segues.
    struct viewController {
      /// Segue identifier `ToMainMapVC`.
      static let toMainMapVC: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewController, SWRevealViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ToMainMapVC")
      
      /// Optionally returns a typed version of segue `ToMainMapVC`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMainMapVC(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewController, SWRevealViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewController.toMainMapVC, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `sidemenuViewController`, and contains static references to 4 segues.
    struct sidemenuViewController {
      /// Segue identifier `cell1`.
      static let cell1: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "cell1")
      /// Segue identifier `cell2`.
      static let cell2: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "cell2")
      /// Segue identifier `cell3`.
      static let cell3: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "cell3")
      /// Segue identifier `cell`.
      static let cell: Rswift.StoryboardSegueIdentifier<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "cell")
      
      /// Optionally returns a typed version of segue `cell1`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func cell1(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidemenuViewController.cell1, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `cell2`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func cell2(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidemenuViewController.cell2, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `cell3`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func cell3(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidemenuViewController.cell3, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `cell`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func cell(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<SWRevealViewControllerSeguePushController, sidemenuViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.sidemenuViewController.cell, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Greego_App_Icon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Greego_App_Icon' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Rectangle 1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle 1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let drivemapVC = StoryboardViewControllerResource<DrivemapVC>(identifier: "DrivemapVC")
      let driverRatingVC = StoryboardViewControllerResource<DriverRatingVC>(identifier: "DriverRatingVC")
      let driverbankViewController = StoryboardViewControllerResource<DriverbankViewController>(identifier: "DriverbankViewController")
      let driverdocumentViewController = StoryboardViewControllerResource<DriverdocumentViewController>(identifier: "DriverdocumentViewController")
      let driverpersonalinfoViewController = StoryboardViewControllerResource<DriverpersonalinfoViewController>(identifier: "DriverpersonalinfoViewController")
      let driverprofileViewController = StoryboardViewControllerResource<DriverprofileViewController>(identifier: "DriverprofileViewController")
      let drivershippingaddViewController = StoryboardViewControllerResource<DrivershippingaddViewController>(identifier: "DrivershippingaddViewController")
      let drivertypeViewController = StoryboardViewControllerResource<DrivertypeViewController>(identifier: "DrivertypeViewController")
      let earningVC = StoryboardViewControllerResource<EarningVC>(identifier: "EarningVC")
      let editProfileVC = StoryboardViewControllerResource<EditProfileVC>(identifier: "EditProfileVC")
      let emailViewController = StoryboardViewControllerResource<EmailViewController>(identifier: "EmailViewController")
      let expressPayDetailVC = StoryboardViewControllerResource<ExpressPayDetailVC>(identifier: "ExpressPayDetailVC")
      let expressPayVC = StoryboardViewControllerResource<ExpressPayVC>(identifier: "ExpressPayVC")
      let helpVC = StoryboardViewControllerResource<HelpVC>(identifier: "HelpVC")
      let helpplolicyVC = StoryboardViewControllerResource<HelpplolicyVC>(identifier: "HelpplolicyVC")
      let helprateVC = StoryboardViewControllerResource<HelprateVC>(identifier: "HelprateVC")
      let lost_foundVC = StoryboardViewControllerResource<lost_foundVC>(identifier: "lost_foundVC")
      let manageVC = StoryboardViewControllerResource<ManageVC>(identifier: "ManageVC")
      let mobilenumberViewController = StoryboardViewControllerResource<MobilenumberViewController>(identifier: "MobilenumberViewController")
      let name = "Main"
      let navigationSettings = StoryboardViewControllerResource<NavigationSettings>(identifier: "NavigationSettings")
      let otpverificationViewController = StoryboardViewControllerResource<OtpverificationViewController>(identifier: "OtpverificationViewController")
      let paymentSettings = StoryboardViewControllerResource<PaymentSettings>(identifier: "PaymentSettings")
      let payoutVC = StoryboardViewControllerResource<payoutVC>(identifier: "payoutVC")
      let popUpConfirmArrival = StoryboardViewControllerResource<popUpConfirmArrival>(identifier: "popUpConfirmArrival")
      let popUpConfirmDropOff = StoryboardViewControllerResource<PopUpConfirmDropOff>(identifier: "PopUpConfirmDropOff")
      let popUpNavigate = StoryboardViewControllerResource<popUpNavigate>(identifier: "popUpNavigate")
      let popUpNoUser = StoryboardViewControllerResource<popUpNoUser>(identifier: "popUpNoUser")
      let popUpPhoneCall = StoryboardViewControllerResource<popUpPhoneCall>(identifier: "popUpPhoneCall")
      let popUpTipDriver = StoryboardViewControllerResource<PopUpTipDriver>(identifier: "PopUpTipDriver")
      let popUpUberLyft = StoryboardViewControllerResource<PopUpUberLyft>(identifier: "PopUpUberLyft")
      let popupHome = StoryboardViewControllerResource<PopupHome>(identifier: "PopupHome")
      let promocodeViewController = StoryboardViewControllerResource<PromocodeViewController>(identifier: "PromocodeViewController")
      let requestDriverVC = StoryboardViewControllerResource<Greegodriverapp.RequestDriverVC>(identifier: "RequestDriverVC")
      let requestSectionVC = StoryboardViewControllerResource<RequestSectionVC>(identifier: "RequestSectionVC")
      let ridehistoryVC = StoryboardViewControllerResource<RidehistoryVC>(identifier: "RidehistoryVC")
      let settingViewController = StoryboardViewControllerResource<SettingViewController>(identifier: "SettingViewController")
      let sidemenuViewController = StoryboardViewControllerResource<sidemenuViewController>(identifier: "sidemenuViewController")
      let signupNameVC = StoryboardViewControllerResource<SignupNameVC>(identifier: "SignupNameVC")
      let swRevealViewController = StoryboardViewControllerResource<SWRevealViewController>(identifier: "SWRevealViewController")
      let tabbarVC = StoryboardViewControllerResource<TabbarVC>(identifier: "TabbarVC")
      let termandconditionViewController = StoryboardViewControllerResource<TermandconditionViewController>(identifier: "TermandconditionViewController")
      let updateEmailVC = StoryboardViewControllerResource<UpdateEmailVC>(identifier: "UpdateEmailVC")
      let viewController = StoryboardViewControllerResource<ViewController>(identifier: "ViewController")
      
      func drivemapVC(_: Void = ()) -> DrivemapVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drivemapVC)
      }
      
      func driverRatingVC(_: Void = ()) -> DriverRatingVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverRatingVC)
      }
      
      func driverbankViewController(_: Void = ()) -> DriverbankViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverbankViewController)
      }
      
      func driverdocumentViewController(_: Void = ()) -> DriverdocumentViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverdocumentViewController)
      }
      
      func driverpersonalinfoViewController(_: Void = ()) -> DriverpersonalinfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverpersonalinfoViewController)
      }
      
      func driverprofileViewController(_: Void = ()) -> DriverprofileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: driverprofileViewController)
      }
      
      func drivershippingaddViewController(_: Void = ()) -> DrivershippingaddViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drivershippingaddViewController)
      }
      
      func drivertypeViewController(_: Void = ()) -> DrivertypeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: drivertypeViewController)
      }
      
      func earningVC(_: Void = ()) -> EarningVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: earningVC)
      }
      
      func editProfileVC(_: Void = ()) -> EditProfileVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileVC)
      }
      
      func emailViewController(_: Void = ()) -> EmailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: emailViewController)
      }
      
      func expressPayDetailVC(_: Void = ()) -> ExpressPayDetailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: expressPayDetailVC)
      }
      
      func expressPayVC(_: Void = ()) -> ExpressPayVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: expressPayVC)
      }
      
      func helpVC(_: Void = ()) -> HelpVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpVC)
      }
      
      func helpplolicyVC(_: Void = ()) -> HelpplolicyVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helpplolicyVC)
      }
      
      func helprateVC(_: Void = ()) -> HelprateVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: helprateVC)
      }
      
      func lost_foundVC(_: Void = ()) -> lost_foundVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: lost_foundVC)
      }
      
      func manageVC(_: Void = ()) -> ManageVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manageVC)
      }
      
      func mobilenumberViewController(_: Void = ()) -> MobilenumberViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mobilenumberViewController)
      }
      
      func navigationSettings(_: Void = ()) -> NavigationSettings? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navigationSettings)
      }
      
      func otpverificationViewController(_: Void = ()) -> OtpverificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: otpverificationViewController)
      }
      
      func paymentSettings(_: Void = ()) -> PaymentSettings? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paymentSettings)
      }
      
      func payoutVC(_: Void = ()) -> payoutVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payoutVC)
      }
      
      func popUpConfirmArrival(_: Void = ()) -> popUpConfirmArrival? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpConfirmArrival)
      }
      
      func popUpConfirmDropOff(_: Void = ()) -> PopUpConfirmDropOff? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpConfirmDropOff)
      }
      
      func popUpNavigate(_: Void = ()) -> popUpNavigate? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpNavigate)
      }
      
      func popUpNoUser(_: Void = ()) -> popUpNoUser? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpNoUser)
      }
      
      func popUpPhoneCall(_: Void = ()) -> popUpPhoneCall? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpPhoneCall)
      }
      
      func popUpTipDriver(_: Void = ()) -> PopUpTipDriver? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpTipDriver)
      }
      
      func popUpUberLyft(_: Void = ()) -> PopUpUberLyft? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popUpUberLyft)
      }
      
      func popupHome(_: Void = ()) -> PopupHome? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: popupHome)
      }
      
      func promocodeViewController(_: Void = ()) -> PromocodeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: promocodeViewController)
      }
      
      func requestDriverVC(_: Void = ()) -> Greegodriverapp.RequestDriverVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestDriverVC)
      }
      
      func requestSectionVC(_: Void = ()) -> RequestSectionVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: requestSectionVC)
      }
      
      func ridehistoryVC(_: Void = ()) -> RidehistoryVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: ridehistoryVC)
      }
      
      func settingViewController(_: Void = ()) -> SettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingViewController)
      }
      
      func sidemenuViewController(_: Void = ()) -> sidemenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: sidemenuViewController)
      }
      
      func signupNameVC(_: Void = ()) -> SignupNameVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signupNameVC)
      }
      
      func swRevealViewController(_: Void = ()) -> SWRevealViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: swRevealViewController)
      }
      
      func tabbarVC(_: Void = ()) -> TabbarVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tabbarVC)
      }
      
      func termandconditionViewController(_: Void = ()) -> TermandconditionViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termandconditionViewController)
      }
      
      func updateEmailVC(_: Void = ()) -> UpdateEmailVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: updateEmailVC)
      }
      
      func viewController(_: Void = ()) -> ViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: viewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "forbes-profile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'forbes-profile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "paper_money") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'paper_money' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "payment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'payment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PIG") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PIG' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sidemenubackimg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sidemenubackimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "padlock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'padlock' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "flag for mobile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'flag for mobile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "right-arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'right-arrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "filledStar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'filledStar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "nextimg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'nextimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Greego1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Greego1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "download-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'download-1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Path 11") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Path 11' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Start-pin") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Start-pin' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ON") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ON' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "cross") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cross' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "map_home") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'map_home' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigation' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Star-PNG-Image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star-PNG-Image' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Line 2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Line 2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "emptyStar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'emptyStar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "greego") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'greego' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Rectangle 69") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle 69' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Exclamation-Point") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Exclamation-Point' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic_greego_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic_greego_logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "share") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'share' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "download") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'download' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LYFTUBERBLOG") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LYFTUBERBLOG' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Rectangle 1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Rectangle 1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "backimg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'backimg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "express") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'express' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "email") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'email' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "mobile") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'mobile' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "switchuser") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switchuser' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logout") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logout' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "phone call") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'phone call' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lyft") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lyft' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "sport-car-coupe-auto-top-view-512") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'sport-car-coupe-auto-top-view-512' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "attachment") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'attachment' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "settings-glyph") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'settings-glyph' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_button") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_button' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "default-user") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'default-user' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ic alert") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic alert' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "unnamed (1)") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'unnamed (1)' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "navigate") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navigate' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "uber-everywhere") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'uber-everywhere' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().popUpUberLyft() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpUberLyft' could not be loaded from storyboard 'Main' as 'PopUpUberLyft'.") }
        if _R.storyboard.main().lost_foundVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'lost_foundVC' could not be loaded from storyboard 'Main' as 'lost_foundVC'.") }
        if _R.storyboard.main().mobilenumberViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mobilenumberViewController' could not be loaded from storyboard 'Main' as 'MobilenumberViewController'.") }
        if _R.storyboard.main().termandconditionViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termandconditionViewController' could not be loaded from storyboard 'Main' as 'TermandconditionViewController'.") }
        if _R.storyboard.main().editProfileVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileVC' could not be loaded from storyboard 'Main' as 'EditProfileVC'.") }
        if _R.storyboard.main().helpplolicyVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpplolicyVC' could not be loaded from storyboard 'Main' as 'HelpplolicyVC'.") }
        if _R.storyboard.main().popUpConfirmArrival() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpConfirmArrival' could not be loaded from storyboard 'Main' as 'popUpConfirmArrival'.") }
        if _R.storyboard.main().drivertypeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drivertypeViewController' could not be loaded from storyboard 'Main' as 'DrivertypeViewController'.") }
        if _R.storyboard.main().payoutVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payoutVC' could not be loaded from storyboard 'Main' as 'payoutVC'.") }
        if _R.storyboard.main().popUpNavigate() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpNavigate' could not be loaded from storyboard 'Main' as 'popUpNavigate'.") }
        if _R.storyboard.main().sidemenuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'sidemenuViewController' could not be loaded from storyboard 'Main' as 'sidemenuViewController'.") }
        if _R.storyboard.main().popUpConfirmDropOff() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpConfirmDropOff' could not be loaded from storyboard 'Main' as 'PopUpConfirmDropOff'.") }
        if _R.storyboard.main().popUpTipDriver() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpTipDriver' could not be loaded from storyboard 'Main' as 'PopUpTipDriver'.") }
        if _R.storyboard.main().paymentSettings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paymentSettings' could not be loaded from storyboard 'Main' as 'PaymentSettings'.") }
        if _R.storyboard.main().manageVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manageVC' could not be loaded from storyboard 'Main' as 'ManageVC'.") }
        if _R.storyboard.main().emailViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'emailViewController' could not be loaded from storyboard 'Main' as 'EmailViewController'.") }
        if _R.storyboard.main().driverpersonalinfoViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverpersonalinfoViewController' could not be loaded from storyboard 'Main' as 'DriverpersonalinfoViewController'.") }
        if _R.storyboard.main().expressPayVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'expressPayVC' could not be loaded from storyboard 'Main' as 'ExpressPayVC'.") }
        if _R.storyboard.main().helpVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helpVC' could not be loaded from storyboard 'Main' as 'HelpVC'.") }
        if _R.storyboard.main().driverRatingVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverRatingVC' could not be loaded from storyboard 'Main' as 'DriverRatingVC'.") }
        if _R.storyboard.main().helprateVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'helprateVC' could not be loaded from storyboard 'Main' as 'HelprateVC'.") }
        if _R.storyboard.main().driverdocumentViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverdocumentViewController' could not be loaded from storyboard 'Main' as 'DriverdocumentViewController'.") }
        if _R.storyboard.main().promocodeViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'promocodeViewController' could not be loaded from storyboard 'Main' as 'PromocodeViewController'.") }
        if _R.storyboard.main().requestDriverVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestDriverVC' could not be loaded from storyboard 'Main' as 'Greegodriverapp.RequestDriverVC'.") }
        if _R.storyboard.main().popUpNoUser() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpNoUser' could not be loaded from storyboard 'Main' as 'popUpNoUser'.") }
        if _R.storyboard.main().ridehistoryVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'ridehistoryVC' could not be loaded from storyboard 'Main' as 'RidehistoryVC'.") }
        if _R.storyboard.main().earningVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'earningVC' could not be loaded from storyboard 'Main' as 'EarningVC'.") }
        if _R.storyboard.main().updateEmailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'updateEmailVC' could not be loaded from storyboard 'Main' as 'UpdateEmailVC'.") }
        if _R.storyboard.main().navigationSettings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navigationSettings' could not be loaded from storyboard 'Main' as 'NavigationSettings'.") }
        if _R.storyboard.main().otpverificationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'otpverificationViewController' could not be loaded from storyboard 'Main' as 'OtpverificationViewController'.") }
        if _R.storyboard.main().viewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'viewController' could not be loaded from storyboard 'Main' as 'ViewController'.") }
        if _R.storyboard.main().drivershippingaddViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drivershippingaddViewController' could not be loaded from storyboard 'Main' as 'DrivershippingaddViewController'.") }
        if _R.storyboard.main().settingViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingViewController' could not be loaded from storyboard 'Main' as 'SettingViewController'.") }
        if _R.storyboard.main().expressPayDetailVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'expressPayDetailVC' could not be loaded from storyboard 'Main' as 'ExpressPayDetailVC'.") }
        if _R.storyboard.main().swRevealViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'swRevealViewController' could not be loaded from storyboard 'Main' as 'SWRevealViewController'.") }
        if _R.storyboard.main().popUpPhoneCall() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popUpPhoneCall' could not be loaded from storyboard 'Main' as 'popUpPhoneCall'.") }
        if _R.storyboard.main().drivemapVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'drivemapVC' could not be loaded from storyboard 'Main' as 'DrivemapVC'.") }
        if _R.storyboard.main().tabbarVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tabbarVC' could not be loaded from storyboard 'Main' as 'TabbarVC'.") }
        if _R.storyboard.main().driverbankViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverbankViewController' could not be loaded from storyboard 'Main' as 'DriverbankViewController'.") }
        if _R.storyboard.main().signupNameVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signupNameVC' could not be loaded from storyboard 'Main' as 'SignupNameVC'.") }
        if _R.storyboard.main().driverprofileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'driverprofileViewController' could not be loaded from storyboard 'Main' as 'DriverprofileViewController'.") }
        if _R.storyboard.main().requestSectionVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'requestSectionVC' could not be loaded from storyboard 'Main' as 'RequestSectionVC'.") }
        if _R.storyboard.main().popupHome() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'popupHome' could not be loaded from storyboard 'Main' as 'PopupHome'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
